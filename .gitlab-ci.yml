stages:
  - status-pre
  - build
  - image
  - publish
  - status-post

# template jobs

.branch-deploy: &branch-deploy
  only:
    - master

.build-codeclimate: &build-codeclimate
  image: apextoaster/code-climate:0.6
  tags:
    - platform:k8s
    - runner:shared

.build-curl: &build-curl
  image: apextoaster/base:1.2
  tags:
    - platform:k8s
    - runner:shared

.build-docker: &build-docker
  image: docker:stable
  services:
    - docker:stable-dind
  tags:
    - platform:k8s
    - runner:shared
  allow_failure: false

  before_script:
    # prep secrets
    - mkdir ${HOME}/.docker
    - echo "${DOCKER_SECRET}" | base64 -d > ${HOME}/.docker/config.json
    - docker info

  after_script:
    - rm -rfv ${HOME}/.docker

  variables: &vars-docker
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    IMAGE_TAG: ssube/isolex:$CI_COMMIT_REF_SLUG

.build-node: &build-node
  image: apextoaster/node:10.1
  tags:
    - platform:k8s
    - runner:shared
  allow_failure: false

  before_script:
    - echo "${NPM_SECRET}" | base64 -d > ${HOME}/.npmrc

# build jobs
build-node:
  <<: [*build-node]
  stage: build

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - yarn
    - make build-strict

  artifacts:
    expire_in: 1 week
    paths:
      - out/coverage
      - out/docs
      - out/main-bundle.*
      - out/version.json

build-image:
  <<: [*build-docker]
  stage: image

  dependencies:
    - build-node
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

# publish jobs
publish-npm:
  <<: [*build-node]
  stage: publish
  only:
    - tags

  dependencies:
    - build-node
  script:
    - npm publish

# commit status
codecov-coverage:
  <<: [*build-node]
  stage: status-post
  when: on_success

  dependencies:
    - build-node
  script:
    - ./node_modules/.bin/codecov --file out/coverage.json --token "$(echo "${CODECOV_SECRET}" | base64 -d)"

codeclimate-pending:
  <<: [*build-codeclimate]
  stage: status-pre
  script:
    - cc-test-reporter before-build

codeclimate-coverage:
  <<: [*build-codeclimate]
  stage: status-post
  script:
    - cc-test-reporter format-coverage -t lcov out/coverage.json
    - cc-test-reporter upload-coverage -r "$(echo "${CODECLIMATE_SECRET}" | base64 -d)"
 
github-pending:
  <<: [*build-curl]
  stage: status-pre
  script:
    - ./scripts/github-status.sh pending

github-failure:
  <<: [*build-curl]
  stage: status-post
  when: on_failure
  script:
    - ./scripts/github-status.sh failure

github-success:
  <<: [*build-curl]
  stage: status-post
  when: on_success
  script:
    - ./scripts/github-status.sh success